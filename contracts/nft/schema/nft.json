{
  "contract_name": "nft",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "minter",
      "name",
      "symbol"
    ],
    "properties": {
      "minter": {
        "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
        "type": "string"
      },
      "name": {
        "description": "Name of the NFT contract",
        "type": "string"
      },
      "symbol": {
        "description": "Symbol of the NFT contract",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Mint a new NFT, can only be called by the contract minter",
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "$ref": "#/definitions/MintMsg_for_Metadata"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates metadata of the NFT",
        "type": "object",
        "required": [
          "update_metadata"
        ],
        "properties": {
          "update_metadata": {
            "type": "object",
            "required": [
              "extension",
              "token_id"
            ],
            "properties": {
              "extension": {
                "$ref": "#/definitions/Metadata"
              },
              "token_id": {
                "type": "string"
              },
              "token_uri": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Burn an NFT the sender has access to",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer is a base message to move a token to another account without triggering actions",
        "type": "object",
        "required": [
          "transfer_nft"
        ],
        "properties": {
          "transfer_nft": {
            "type": "object",
            "required": [
              "recipient",
              "token_id"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Send is a base message to transfer a token to a contract and trigger an action on the receiving contract.",
        "type": "object",
        "required": [
          "send_nft"
        ],
        "properties": {
          "send_nft": {
            "type": "object",
            "required": [
              "contract",
              "msg",
              "token_id"
            ],
            "properties": {
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "required": [
          "native",
          "status"
        ],
        "properties": {
          "native": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "status": {
            "$ref": "#/definitions/Status"
          }
        }
      },
      "MintMsg_for_Metadata": {
        "type": "object",
        "required": [
          "extension",
          "owner",
          "token_id"
        ],
        "properties": {
          "extension": {
            "description": "Any custom extension used by this contract",
            "allOf": [
              {
                "$ref": "#/definitions/Metadata"
              }
            ]
          },
          "owner": {
            "description": "The owner of the newly minter NFT",
            "type": "string"
          },
          "token_id": {
            "description": "Unique ID of the NFT",
            "type": "string"
          },
          "token_uri": {
            "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Status": {
        "type": "string",
        "enum": [
          "Bonded",
          "Unbonding",
          "Burnt"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Return the owner of the given token, error if token does not exist",
        "type": "object",
        "required": [
          "owner_of"
        ],
        "properties": {
          "owner_of": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Total number of tokens issued",
        "type": "object",
        "required": [
          "num_tokens"
        ],
        "properties": {
          "num_tokens": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns top-level metadata about the contract",
        "type": "object",
        "required": [
          "contract_info"
        ],
        "properties": {
          "contract_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns metadata about one particular token, based on *ERC721 Metadata JSON Schema* but directly from the contract",
        "type": "object",
        "required": [
          "nft_info"
        ],
        "properties": {
          "nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With MetaData Extension. Returns the result of both `NftInfo` and `OwnerOf` as one query as an optimization for clients",
        "type": "object",
        "required": [
          "all_nft_info"
        ],
        "properties": {
          "all_nft_info": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "include_expired": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With Enumerable extension. Returns all tokens owned by the given address, [] if unset.",
        "type": "object",
        "required": [
          "tokens"
        ],
        "properties": {
          "tokens": {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "With Enumerable extension. Requires pagination. Lists all token_ids controlled by the contract.",
        "type": "object",
        "required": [
          "all_tokens"
        ],
        "properties": {
          "all_tokens": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the minter",
        "type": "object",
        "required": [
          "minter"
        ],
        "properties": {
          "minter": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Extension query",
        "type": "object",
        "required": [
          "collection_info"
        ],
        "properties": {
          "collection_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllNftInfoResponse_for_Metadata",
      "type": "object",
      "required": [
        "access",
        "info"
      ],
      "properties": {
        "access": {
          "description": "Who can transfer the token",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerOfResponse"
            }
          ]
        },
        "info": {
          "description": "Data on the token itself,",
          "allOf": [
            {
              "$ref": "#/definitions/NftInfoResponse_for_Metadata"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Metadata": {
          "type": "object",
          "required": [
            "native",
            "status"
          ],
          "properties": {
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "status": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "NftInfoResponse_for_Metadata": {
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "description": "You can add any custom metadata here when you extend cw721-base",
              "allOf": [
                {
                  "$ref": "#/definitions/Metadata"
                }
              ]
            },
            "token_uri": {
              "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "OwnerOfResponse": {
          "type": "object",
          "required": [
            "approvals",
            "owner"
          ],
          "properties": {
            "approvals": {
              "description": "If set this address is approved to transfer/send the token as well",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "owner": {
              "description": "Owner of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Status": {
          "type": "string",
          "enum": [
            "Bonded",
            "Unbonding",
            "Burnt"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "collection_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Null",
      "type": "null"
    },
    "contract_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractInfoResponse",
      "type": "object",
      "required": [
        "name",
        "symbol"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "minter": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MinterResponse",
      "description": "Shows who can mint these tokens",
      "type": "object",
      "required": [
        "minter"
      ],
      "properties": {
        "minter": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftInfoResponse_for_Metadata",
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "allOf": [
            {
              "$ref": "#/definitions/Metadata"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Metadata": {
          "type": "object",
          "required": [
            "native",
            "status"
          ],
          "properties": {
            "native": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "status": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "Status": {
          "type": "string",
          "enum": [
            "Bonded",
            "Unbonding",
            "Burnt"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "num_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NumTokensResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "owner_of": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_from` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
